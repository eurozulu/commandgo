// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// _help/help.json
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __helpHelpJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x93\x4b\x6f\xdb\x48\x0c\xc7\xef\xfb\x29\xfe\xd0\x25\x4e\xe0\x15\xf2\x38\xec\xc2\xb7\x6c\x92\xcd\x2e\xd0\x47\xe0\xba\xe8\x25\x17\x56\xa2\xad\x41\x66\x86\x2a\x87\x13\xc5\x08\xf2\xdd\x8b\x91\x6c\xa5\x40\x0f\x12\x20\xfe\xc9\x1f\x9f\x7a\xad\x76\x6c\xd5\xea\xb5\xea\xa9\x79\xa2\x1d\x47\x0a\x5c\xad\xaa\xce\xac\xaf\xef\xd9\xaa\x65\xd5\x93\x52\x60\x63\x4d\xd5\xaa\xaa\x96\x55\x23\x21\x70\xb4\x6a\x55\x6d\x73\x6c\x70\xcf\xb6\xc8\xea\x91\x4c\x5d\xdc\x9d\x62\xa1\x9c\x7a\x9c\xad\x39\xf5\x12\x13\x2f\xc1\xaa\xe5\x11\x3d\x7d\x8c\x00\x4a\x00\x5c\x4a\x99\x13\x08\xf7\x77\x1b\x98\xc0\x3a\x46\xea\xb9\x71\x5b\xc7\x2d\xbe\xae\x3f\xd4\xf8\x7f\x3b\x5a\xf5\xc0\x81\x4b\x90\xc8\x90\xd1\x3c\x91\xb6\xe2\xbd\x0c\x2e\xee\xa0\xdc\x3a\xe5\xc6\xd0\x48\xcb\x69\x39\xe6\x98\xd4\x74\xa0\x4c\xfa\x12\xb9\x2f\xf9\x08\x81\x5e\x5c\xc8\xa1\xf0\x2e\xce\x27\xdc\xd1\x29\xad\x1e\xe3\x64\xb9\x3a\xbf\xc0\xe2\xa3\x3c\x73\x8b\x07\xd6\x40\x91\xa3\xf9\xfd\xe9\x51\xbc\xc4\xe2\x5f\xc9\xb1\x9d\x0d\x57\x58\x7c\x61\xc6\x67\xeb\x58\x67\xe3\x5f\x58\x6c\x38\xf4\xa2\xa4\x7b\xac\x0f\x39\x66\xf5\x6f\x2c\x66\xf4\xaf\xea\xa4\x5f\xc7\x69\x74\xa5\x7b\x65\xcb\x1a\xb9\x85\x1b\x47\xa0\x8c\xa1\xbc\x4c\x04\x81\xe2\xfe\xbd\x7c\x14\xff\xd9\x87\x12\xe8\x40\xfb\x6f\xb3\x79\x40\xaf\x62\xd2\x88\x9f\xc0\x35\xae\x11\x25\xfe\x79\xf9\xf2\xf2\x3e\xea\x56\x38\xc5\x13\x43\x43\x39\x31\x28\xce\xae\x63\x96\xa9\x8a\x89\x38\x15\x37\x38\xef\xf1\x7d\xda\xcd\xbe\x67\x9c\x65\xf5\xf5\xdd\x14\xb3\xe9\x18\xf3\x27\x9e\xc9\x67\x3e\x49\xd8\xb8\xc0\x92\x0d\x81\xad\x93\x76\x04\x1c\x77\xd0\x8b\x1a\x4c\x33\x97\x1e\x94\x7f\x64\x4e\x06\x73\x81\x5b\x94\x88\x92\x8e\x12\x1a\x8a\x0d\x7b\x6e\xeb\xe3\xa4\xbe\x75\x3c\xd6\x59\x26\x15\x9d\x5f\x8e\xdd\x80\xfc\x40\xfb\x84\x46\xa2\x91\x8b\xe5\xe0\x4a\xb3\xd1\xf9\x51\xae\xff\x91\x76\x5f\xe3\x86\xbc\x67\x45\xea\x24\xfb\x43\x5f\x8d\x97\xc4\xef\x3e\x18\x0a\xbd\x2d\xf7\xa7\x4c\x6d\xb9\xb8\xad\x4a\x80\xb3\x39\xff\x74\xd5\x20\x0c\x4a\x7d\xcf\x0a\xd2\x72\x1a\xb8\xe5\x2d\x65\x6f\x37\xde\x71\xb4\xf2\x47\xcd\x11\x9b\xb2\xb7\x27\x06\xcd\x5d\x0e\xce\x3a\x34\x39\x99\x04\x74\x4c\x2d\x6b\x5a\xa2\xac\xe0\x13\x0f\xeb\x83\x0f\xfd\xc6\xbc\x95\xba\x7a\x7b\xfb\xe3\x67\x00\x00\x00\xff\xff\xb1\x64\x20\x8a\xc9\x03\x00\x00")

func _helpHelpJsonBytes() ([]byte, error) {
	return bindataRead(
		__helpHelpJson,
		"_help/help.json",
	)
}

func _helpHelpJson() (*asset, error) {
	bytes, err := _helpHelpJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_help/help.json", size: 969, mode: os.FileMode(420), modTime: time.Unix(1579860211, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_help/help.json": _helpHelpJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_help": &bintree{nil, map[string]*bintree{
		"help.json": &bintree{_helpHelpJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
